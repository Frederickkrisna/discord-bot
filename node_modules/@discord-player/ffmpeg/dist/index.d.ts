import * as stream from 'stream';
import { DuplexOptions, Duplex } from 'stream';
import childProcess from 'child_process';

type Callback<Args extends Array<unknown>> = (...args: Args) => unknown;
interface FFmpegInfo {
    command: string | null;
    metadata: string | null;
    version: string | null;
    isStatic: boolean;
}
interface FFmpegOptions extends DuplexOptions {
    args?: string[];
    shell?: boolean;
}
interface FFmpegLocation {
    displayName: string;
    getPath: () => string;
}
declare const FFmpegPossibleLocations: FFmpegLocation[];
declare class FFmpeg extends Duplex {
    /**
     * FFmpeg version regex
     */
    static VersionRegex: RegExp;
    /**
     * Spawns ffmpeg process
     * @param options Spawn options
     */
    static spawn({ args, shell }?: {
        args?: string[] | undefined;
        shell?: boolean | undefined;
    }): childProcess.ChildProcessWithoutNullStreams;
    /**
     * Check if ffmpeg is available
     */
    static isAvailable(): boolean;
    /**
     * Safe locate ffmpeg
     * @param force if it should relocate the command
     */
    static locateSafe(force?: boolean): FFmpegInfo | null | undefined;
    /**
     * Locate ffmpeg command. Throws error if ffmpeg is not found.
     * @param force Forcefully reload
     */
    static locate(force?: boolean): FFmpegInfo | undefined;
    /**
     * Current FFmpeg process
     */
    process: childProcess.ChildProcessWithoutNullStreams;
    /**
     * Create FFmpeg duplex stream
     * @param options Options to initialize ffmpeg
     * @example ```typescript
     * const ffmpeg = new FFmpeg({
     *   args: [
     *     '-analyzeduration', '0',
     *     '-loglevel', '0',
     *     '-f', 's16le',
     *     '-ar', '48000',
     *     '-ac', '2',
     *     '-af', 'bass=g=10,acompressor'
     *   ]
     * });
     *
     * const pcm = input.pipe(ffmpeg);
     *
     * pcm.pipe(fs.createWriteStream('./audio.pcm'));
     * ```
     */
    constructor(options?: FFmpegOptions);
    get _reader(): stream.Readable;
    get _writer(): stream.Writable;
    private _copy;
    _destroy(err: Error | null, cb: Callback<[Error | null]>): unknown;
    _final(cb: Callback<[]>): void;
    private _cleanup;
    toString(): string;
}
declare const findFFmpeg: typeof FFmpeg.locate;

declare const version: string;

export { FFmpeg, FFmpegInfo, FFmpegOptions, FFmpegPossibleLocations, findFFmpeg, version };

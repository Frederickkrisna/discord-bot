"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FFmpeg: () => FFmpeg,
  FFmpegPossibleLocations: () => FFmpegPossibleLocations,
  findFFmpeg: () => findFFmpeg,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/FFmpeg.ts
var import_child_process = __toESM(require("child_process"));
var import_stream = require("stream");
var validatePathParam = /* @__PURE__ */ __name((t, name) => {
  if (typeof t !== "string" || !t)
    throw new TypeError(`Expected ${name ? name.concat(" to be ") : ""}a string, got ${t}`);
  return t;
}, "validatePathParam");
var ffmpegInfo = {
  command: null,
  metadata: null,
  version: null,
  isStatic: false
};
var isWindows = process.platform === "win32";
var FFmpegPossibleLocations = [
  {
    getPath() {
      return validatePathParam(process.env.FFMPEG_PATH, this.displayName);
    },
    displayName: "spawn process.env.FFMPEG_PATH"
  },
  {
    getPath() {
      return "ffmpeg";
    },
    displayName: "spawn ffmpeg"
  },
  {
    getPath() {
      return "avconv";
    },
    displayName: "spawn avconv"
  },
  {
    getPath() {
      const loc = "./ffmpeg";
      if (isWindows)
        return loc.concat(".exe");
      return loc;
    },
    displayName: "spawn ./ffmpeg"
  },
  {
    getPath() {
      const loc = "./avconv";
      if (isWindows)
        return loc.concat(".exe");
      return loc;
    },
    displayName: "spawn ./avconv"
  },
  {
    getPath() {
      const mod = require("@ffmpeg-installer/ffmpeg");
      return validatePathParam(mod.default?.path || mod.path || mod, this.displayName);
    },
    displayName: 'require("@ffmpeg-installer/ffmpeg")'
  },
  {
    getPath() {
      const mod = require("ffmpeg-static");
      return validatePathParam(mod.default?.path || mod.path || mod, this.displayName);
    },
    displayName: 'require("ffmpeg-static")'
  },
  {
    getPath() {
      const mod = require("@node-ffmpeg/node-ffmpeg-installer");
      return validatePathParam(mod.default?.path || mod.path || mod, this.displayName);
    },
    displayName: 'require("@node-ffmpeg/node-ffmpeg-installer")'
  },
  {
    getPath() {
      const mod = require("ffmpeg-binaries");
      return validatePathParam(mod.default || mod, this.displayName);
    },
    displayName: 'require("ffmpeg-binaries")'
  }
];
var _FFmpeg = class extends import_stream.Duplex {
  constructor(options = {}) {
    super(options);
    this.process = _FFmpeg.spawn(options);
    const EVENTS = {
      readable: this._reader,
      data: this._reader,
      end: this._reader,
      unpipe: this._reader,
      finish: this._writer,
      drain: this._writer
    };
    this._readableState = this._reader._readableState;
    this._writableState = this._writer._writableState;
    this._copy(["write", "end"], this._writer);
    this._copy(["read", "setEncoding", "pipe", "unpipe"], this._reader);
    for (const method of ["on", "once", "removeListener", "removeAllListeners", "listeners"]) {
      this[method] = (ev, fn) => EVENTS[ev] ? EVENTS[ev][method](ev, fn) : import_stream.Duplex.prototype[method].call(this, ev, fn);
    }
    const processError = /* @__PURE__ */ __name((error) => this.emit("error", error), "processError");
    this._reader.on("error", processError);
    this._writer.on("error", processError);
  }
  static spawn({ args = [], shell = false } = {}) {
    if (!args.includes("-i"))
      args.unshift("-i", "-");
    return import_child_process.default.spawn(this.locate().command, args.concat(["pipe:1"]), { windowsHide: true, shell });
  }
  static isAvailable() {
    return typeof this.locateSafe(false)?.command === "string";
  }
  static locateSafe(force = false) {
    try {
      return this.locate(force);
    } catch {
      return null;
    }
  }
  static locate(force = false) {
    if (ffmpegInfo.command && !force)
      return ffmpegInfo;
    const errStacks = new Array(FFmpegPossibleLocations.length);
    for (const locator of FFmpegPossibleLocations) {
      if (locator == null)
        continue;
      try {
        const command = locator.getPath();
        const result = import_child_process.default.spawnSync(command, ["-h"], {
          windowsHide: true
        });
        if (result.error)
          throw result.error;
        ffmpegInfo.command = command;
        ffmpegInfo.metadata = Buffer.concat(result.output.filter(Boolean)).toString();
        ffmpegInfo.isStatic = locator.displayName.startsWith('require("');
        ffmpegInfo.version = _FFmpeg.VersionRegex.exec(ffmpegInfo.metadata || "")?.[1] || null;
        return ffmpegInfo;
      } catch (e) {
        errStacks.push(e);
      }
    }
    throw new Error([
      "Could not locate ffmpeg. Tried:\n",
      ...FFmpegPossibleLocations.map((loc, i) => `  ${++i}. ${loc.displayName}`),
      "\n",
      `${"=".repeat(5)}Full Stacktrace${"=".repeat(5)}`,
      ...errStacks.map((e) => e.stack || e.message)
    ].join("\n"));
  }
  get _reader() {
    return this.process.stdout;
  }
  get _writer() {
    return this.process.stdin;
  }
  _copy(methods, target) {
    for (const method of methods) {
      this[method] = target[method].bind(target);
    }
  }
  _destroy(err, cb) {
    this._cleanup();
    if (cb)
      return cb(err);
  }
  _final(cb) {
    this._cleanup();
    cb();
  }
  _cleanup() {
    if (this.process) {
      this.once("error", () => {
      });
      this.process.kill("SIGKILL");
      this.process = null;
    }
  }
  toString() {
    if (!ffmpegInfo.metadata)
      return "FFmpeg";
    return ffmpegInfo.metadata;
  }
};
var FFmpeg = _FFmpeg;
__name(FFmpeg, "FFmpeg");
FFmpeg.VersionRegex = /version (.+) Copyright/im;
var findFFmpeg = FFmpeg.locate;

// src/index.ts
var version = "0.1.0";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FFmpeg,
  FFmpegPossibleLocations,
  findFFmpeg,
  version
});
//# sourceMappingURL=data:application/json;base64,